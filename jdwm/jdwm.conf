#
# Example/default jdwm configuration file.
# For more information, please go to https://github.com/JeffofBread/jdwm/
#

#
# TODO: Probably organize some of the per-tag values together
#

#
# Warnings:
#       This is named "themes", but that is slightly deceptive. jdwm
#       only has the ability to use a single theme currently, so
#       the parser is set to only use the first theme in the list.
#
# The themes are structured as such:
#       1) "name": A unique name for each theme. Currently unused.
#
#       2) "font": A string containing an XLFD or FreeType font. See:
#               -  https://wiki.archlinux.org/title/X_Logical_Font_Description
#               -  https://dwm.suckless.org/customisation/font/
#
#       3)
#
themes = (
        {
                name = "Storm";

                font = "JetBrainsMono:size=14";

                client-selected = {
                        foreground = "#0B0D1E";
                        background = "#0B0D1E";
                        normal-border = "#A8CAD3";
                        floating-border = "#A8CAD3";
                };

                client-unselected = {
                        foreground = "#0B0D1E";
                        background = "#0B0D1E";
                        normal-border = "#16162F";
                        floating-border = "#16162F";
                };

                layout = {
                        text = "#A8CAD3";
                        background = "#16162F";
                };

                systray = {
                        text = "#A8CAD3";
                        background = "#16162F";
                };

                statusbar = {
                        text = "#A8CAD3";
                        background = "#16162F";
                };

                tag-selected = {
                        text = "#fa9061";
                        background = "#16162F";
                };

                tag-unselected = {
                        text = "#A8CAD3";
                        background = "#16162F";
                };

                titlebar-selected = {
                        text = "#A8CAD3";
                        background = "#16162F";
                };

                titlebar-unselected = {
                        text = "#A8CAD3";
                        background = "#16162F";
                };
        }
);

#
# Notes:
#       I recommend reading suckless' explanation of the `rules` array.
#       It generally still applies here, just in a config file instead
#       of source code.
#               - https://dwm.suckless.org/customisation/rules/
#               - https://dwm.suckless.org/customisation/tagmask/
#
# The rules are structured as such:
#       1) "class": String containing the SECOND element of WM_CLASS of
#           the desired client to be effected by this rule. Note, "null"
#           is also a valid option if you wish to ignore the class name.
#
#       2) "instance": String containing the FIRST element of WM_CLASS of
#           the desired client to be effected by this rule. Note, "null"
#           is also a valid option if you wish to ignore the instance name.
#
#       3) "title": String containing _NET_WM_NAME or WM_NAME of
#           the desired client to be effected by this rule. Note, "null"
#           is also a valid option if you wish to ignore the title.
#
#       4) "tag-mask": Tag bitmask to move the client to. For example, a
#          bitmask of '4' (2^3) would move the client to tag 3.
#
#       5) "monitor": Monitor to move the client to. -1 moves the client to
#          the currently focused monitor.
#
#       6) "floating": Floating state of the client. Can be `true` or `false`.
#
#       7) "ignore-transient": Force ignore client's transient windows or not.
#          Can be `true` or `false`.
#
#       8) "unmanaged": If jdwm should leave the client unmanaged. This leaves
#          complete control of the clients size and position to the client with
#          no intervention from jdwm. Can be `true` or `false`.
#
rules = (
        { # Scratchpad rule, so it always spawns floating
                class = "null";
                instance = "null";
                title = "Scratchpad";
                tag-mask = 0;
                monitor = -1;
                floating = true;
                ignore-transient = false;
                unmanaged = false;
        }
);

#
# Warnings:
#       1) Make sure the line is appended with a comma,
#          because without it libconfig will think it is
#          a single multi-line keybind
#
#       2) The keysym part of the keybind (ex. Q, A, Return)
#          can be case sensitive. Basic alphabetical characters
#          should not be an issue, but things like `Grave` or
#          `Return` MUST be capitalized to work. Others, like
#          `Scroll_Lock` are both capitalized and seperated by
#          an underscore. I recommend using xev to check how
#          a bind is spelled.
#
# The keybinds are structured as follows
#       1) Modifier(s). This is an optional part of the bind that defines
#          another special key that must be pressed with your main key.
#          Modifier(s) must be seperated by '+' from the main key and other
#          modifiers. A list of all modifiers is below. You can use a max
#          of 3 modifiers.
#
#       2) Main key. This is a required part of the bind, and defines the
#          main key required to envoke the defined function. The main key
#          must be seperated from any modifiers with a '+', and seperated
#          from the function with a comma. It is recommended to use a
#          program like `xev` to find the name of the key. Note,
#          capitalization is important in many cases, though jdwm will try
#          and correct for SOME of this (like with A-Z characters).
#
#       3) Function. This is the function that will be invoked when the key
#          combination is pressed. It also determines the type of argument
#          (if any) is required in the third (and final) section of the keybind.
#          It should be seperated from the previous section (modifiers + key)
#          with a comma. A list of all available functions and their argument
#          types is listed below. Note, if no argument is required, then there
#          is no need for a comma after your function (inside the quotes, a
#          comma is still required at the end of line).
#
#       4) Argument. This is the information that will be passed to the
#          function in the third field (if an argument is required by that
#          function). Make sure these values are of the correct type listed
#          by your chosen function, else the bind could be invalidated when
#          jdwm attempts to parse it, or it could lead to logical errors.
#
#       Example formats:
#               "Main Key, Function, Argument"
#               "Modifier + Main Key, Function, Argument"
#               "Modifier + Modifier + Main Key, Function, Argument"
#               "Modifier + Modifier + Modifier + Main Key, Function, Argument"
#               "Modifier + Main Key, Function (doesn't require argument)"
#               "Main Key, Function (doesn't require argument)"
#
# Available modifiers:
#       "shift",
#       "caps" or "capslock",
#       "ctrl" or "control",
#       "alt" or "mod1",
#       "super" or "mod4",
#       "mod2",
#       "mod3",
#       "mod5",
#
# Available functions:
#
#        center-floating                        // No Argument
#        client-and-view-to-tag                 // Unsigned Integer Argument ( 1 to 9 (assuming 9 tags) )
#        client-and-view-to-tag-bitmask         // Integer Argument ( -1 to 2^9 (assuming 9 tags) )
#        client-to-monitor                      // Integer Argument ( -1 to 1 )
#        client-to-tag                          // Unsigned Integer Argument ( 1 to 9 (assuming 9 tags) )
#        client-to-tag-bitmask                  // Integer Argument ( -1 to 2^9 (assuming 9 tags) )
#        exec                                   // String Argument
#        float-and-move                         // No Argument
#        focus-monitor                          // Integer Argument ( -1 to 1 )
#        focus-stack                            // Integer Argument ( -1 to 1 )
#        increment-all-gaps                     // Integer Argument ( -9999 to 9999 )
#        increment-clients-in-master-area       // Integer Argument ( -99 to 99 )
#        increment-inner-gaps                   // Integer Argument ( -9999 to 9999 )
#        increment-inner-horizontal-gaps        // Integer Argument ( -9999 to 9999 )
#        increment-inner-vertical-gaps          // Integer Argument ( -9999 to 9999 )
#        increment-outer-gaps                   // Integer Argument ( -9999 to 9999 )
#        increment-outer-horizontal-gaps        // Integer Argument ( -9999 to 9999 )
#        increment-outer-vertical-gaps          // Integer Argument ( -9999 to 9999 )
#        kill-client                            // No Argument
#        layout-scroll                          // Integer Argument ( -1 to 14 (assuming the default 14 layouts) )
#        move-mouse                             // No Argument
#        quit                                   // No Argument
#        reload                                 // No Argument
#        reset-gaps                             // No Argument
#        resize-mouse                           // No Argument
#        rotate-stack                           // Integer Argument ( -1 to 1 )
#        set-layout                             // Unsigned Integer Argument ( 0 to 13 (assuming default 14 layouts) )
#        set-master-factor                      // Float Argument ( -0.95 to 0.95 )
#        shift-both                             // Integer Argument ( -8 to 8 (assuming the default 9 tags) )
#        shift-view                             // Integer Argument ( -8 to 8 (assuming the default 9 tags) )
#        toggle-bar                             // No Argument
#        toggle-fake-fullscreen                 // No Argument
#        toggle-floating                        // No Argument
#        toggle-fullscreen                      // No Argument
#        toggle-gaps                            // No Argument
#        toggle-scratchpad                      // String Argument
#        toggle-sticky                          // No Argument
#        toggle-view-tag                        // Unsigned Integer Argument ( 1 to 9 (assuming 9 tags) )
#        toggle-view-tag-bitmask                // Integer Argument ( -1 to 2^9 (assuming 9 tags) )
#        view-tag                               // Unsigned Integer Argument ( 1 to 9 (assuming 9 tags) )
#        view-tag-bitmask                       // Integer Argument ( -1 to 2^9 (assuming 9 tags) )
#        view-tag-all-monitors                  // Unsigned Integer Argument ( 1 to 9 (assuming 9 tags) )
#        view-tag-all-monitors-bitmask          // Integer Argument ( -1 to 2^9 (assuming 9 tags) )
#        zoom                                   // No Argument
#
keybinds = (

        # Misc
        "Super + Q, kill-client",
        "Super + Shift + Q, reload",
        "Super + Control + Shift + Q, quit",
        "Super + B, toggle-bar",
        "Super + S, toggle-sticky",
        "Super + Left, focus-monitor, -1",
        "Super + Right, focus-monitor, +1",

        # Move / resize windows
        "Super + F, toggle-fullscreen",
        "Super + Shift + F, toggle-fake-fullscreen",
        "Super + Shift + Left, client-to-monitor, -1",
        "Super + Shift + Right, client-to-monitor, +1",
        "Super + Shift + Left, focus-monitor, -1",
        "Super + Shift + Right, focus-monitor, +1",
        "Super + Down, focus-stack, -1",
        "Super + Up, focus-stack, +1",
        "Super + Shift + Down, shift-both, -1",
        "Super + Shift + Up, shift-both, +1",
        "Super + Shift + space, toggle-floating",
        "Super + Control + space, center-floating",

        # Layout
        "Super + Return, zoom",
        "Super + Control + J, rotate-stack, +1",
        "Super + Control + K, rotate-stack, -1",
        "Super + comma, layout-scroll, -1",
        "Super + period, layout-scroll, +1",
        "Super + Shift + h, set-master-factor, -0.05",
        "Super + Shift + l, set-master-factor, +0.05",
        "Super + G, toggle-gaps",

        # Common programs bound to keys
        "Super + Return, exec, alacritty",
        "Super + A, exec, thunar",
        "Super + C, exec, codium",
        "Super + D, exec, rofi -no-fixed-num-lines -show drun",
        "Super + W, exec, firefox",
        "Super + Escape, toggle-scratchpad, alacritty -T Scratchpad",
        "Super + Shift + Escape, exec, alacritty -T Scratchpad",

        # Media keybinds

        # Depricated in favor of more direct binds build into keyboard
        #
        # "Super + Prior, exec, pamixer -i 5",
        # "Super + Next, exec, pamixer -d 5",
        # "Super + Scroll_Lock, exec, playerctl next",
        # "Super + Print, exec, playerctl previous",
        # "Super + Home, exec, playerctl position 10+",
        # "Super + End, exec, playerctl position 10-",
        # "Super + Pause, exec, playerctl play-pause",
        # "Super + Insert, exec, pactl set-sink-mute @DEFAULT_SINK@ toggle",
        # "Super + Delete, exec, pactl set-sink-mute @DEFAULT_SOURCE@ toggle",

        "XF86AudioPlay, exec, playerctl play-pause",
        "XF86AudioStop, exec, playerctl stop",
        "XF86AudioForward, exec, playerctl position 10+",
        "XF86AudioRewind, exec, playerctl position 10-",
        "XF86AudioRaiseVolume, exec, pamixer -i 5",
        "XF86AudioLowerVolume, exec, pamixer -d 5",
        "XF86AudioNext, exec, playerctl next",
        "XF86AudioPrev, exec, playerctl previous",

        # Go to tags
        "Super + 1, view-tag, 1",
        "Super + 2, view-tag, 2",
        "Super + 3, view-tag, 3",
        "Super + 4, view-tag, 4",
        "Super + 5, view-tag, 5",
        "Super + 6, view-tag, 6",
        "Super + 7, view-tag, 7",
        "Super + 8, view-tag, 8",
        "Super + 9, view-tag, 9",
        "Super + 0, view-tag-bitmask, -1",

        # Toggle view of tags
        "Super + Control + 1, toggle-view-tag, 1",
        "Super + Control + 2, toggle-view-tag, 2",
        "Super + Control + 3, toggle-view-tag, 3",
        "Super + Control + 4, toggle-view-tag, 4",
        "Super + Control + 5, toggle-view-tag, 5",
        "Super + Control + 6, toggle-view-tag, 6",
        "Super + Control + 7, toggle-view-tag, 7",
        "Super + Control + 8, toggle-view-tag, 8",
        "Super + Control + 9, toggle-view-tag, 9",
        "Super + Control + 0, toggle-view-tag-bitmask, -1",

        # Go to tags and bring focused client
        "Super + Shift + 1, client-and-view-to-tag, 1",
        "Super + Shift + 2, client-and-view-to-tag, 2",
        "Super + Shift + 3, client-and-view-to-tag, 3",
        "Super + Shift + 4, client-and-view-to-tag, 4",
        "Super + Shift + 5, client-and-view-to-tag, 5",
        "Super + Shift + 6, client-and-view-to-tag, 6",
        "Super + Shift + 7, client-and-view-to-tag, 7",
        "Super + Shift + 8, client-and-view-to-tag, 8",
        "Super + Shift + 9, client-and-view-to-tag, 9",
        "Super + Shift + 0, client-and-view-to-tag-bitmask, -1",

        "Super + O, shift-view, +1",
        "Super + I, shift-view, -1"
);

#
# Buttonbinds follow a very similar structure to the above keybinds.
# Read how the keybinds work before reading the below, it is necessary context.
#
# Buttonbinds only differ in 2 ways.
#       1) The Main Key has been replaced by a Button instead
#       2) An extra element (second, directly after Modifiers + Button)
#          has been added, and defines what on screen the cursor needs
#          to be hovering over to use the bind.
#
# Example formats:
#       "Button, Clickable, Function, Argument"
#       "Modifier + Button, Clickable, Function, Argument"
#       "Modifier + Modifier + Button, Clickable, Function, Argument"
#       "Modifier + Modifier + Modifier + Button, Clickable, Function, Argument"
#       "Modifier + Button, Clickable, Function (doesn't require argument)"
#       "Button, Clickable, Function (doesn't require argument)"
#
# Available Buttons:
#       "leftclick" or "left-click",
#       "middleclick" or "middle-click",
#       "rightclick" or "right-click",
#       "scrollup" or "scroll-up",
#       "scrolldown" or "scroll-down",
#
#       Or any integer 1-255. Use xev to see what you need.
#
# Available Clickable Elements:
#       "tag",
#       "layout",
#       "status",
#       "title",
#       "window",
#       "desktop",
#
buttonbinds = (

        # Misc
        "Left-Click, Tag, view-tag-bitmask, 0",
        "Middle-Click, Status, exec, xterm",
        "Middle-Click, Title, kill-client",
        "Shift + Middle-Click, Window, toggle-floating",
        "Right-Click, Tag, toggle-view-tag-bitmask, 0",

        # Move windows with mouse
        "Super + Right-Click, Window, resize-mouse",
        "Super + Left-Click, Window, move-mouse",
        "Super + Control + Left-Click, Window, float-and-move",

        # Easy way to send client AND focus to a tag
        "Super + Left-Click, Tag, client-to-tag-bitmask, 0",
        "Super + Left-Click, Tag, view-tag-bitmask, 0",

        # Simple layout control
        "Left-Click, Layout, layout-scroll, +1",
        "Right-Click, Layout, layout-scroll, -1"
);

################################
##        Bar Settings        ##
################################

# Determines if jdwm's bar is shown by default on a a
# monitor. This setting does not effect the bars ability
# to be toggled using the bind function "toggle-bar".
#
# Type: Boolean, Default: true
show-bar-by-default = true;

# Determines the position of jdwm's bar on the monitor.
#
# Type: Boolean, Default: true
enable-top-bar = true;

# Determines if the system tray is visible or not.
#
# Type: Boolean, Default: true
show-system-tray = true;

# Determines if the bar's status text is visible or not.
#
# Type: Boolean, Default: true
show-status-text = true;

# Determines if the tags icons/names are visible or not.
#
# Type: Boolean, Default: True
show-tags = true;

# Determines if the client's title is visible in the bar or not.
#
# Type: Boolean, Default: true
show-client-title = true;

# Determines if the layout symbol is visible or not.
#
# Type: Boolean, Default: true
show-layout-symbol = true;

# Determines if the floating indicator floating indicator is
# shown next to the client's icon in the bar.
#
# NOTE: Requires "show-client-title" to be "true"
#
# Type: Boolean, Default: true
show-floating-indicator = true;

# Determines if an underline is shown under the currently viewed
# tag(s) or not.
#
# Type: Boolean, Default: true
show-tag-underline = true;

# Determines if the client's title (and icon(s)) are centered in
# the bar, or if it are left aligned.
#
# Type: Boolean, Default: true
enable-centered-client-title = true;

# Default: 10, Min: -9999, Max: 9999
vertical-bar-padding = 10;

# Default: 10, Min: -9999, Max: 9999
horizontal-bar-padding = 10;

# Default: 1, Min: -9999, Max: 9999
vertical-status-bar-padding = 1;

# Default: 5, Min: -9999, Max: 9999
horizontal-status-bar-padding = 5;

# Default: 2, Min: -9999, Max: 9999
underline-thickness = 2;

# Default: 1, Min: -9999, Max: 9999
underline-vertical-padding = 1;

# Default: 5, Min: -9999, Max: 9999
underline-horizontal-padding = 5;

# Default: 0, Min: -9999, Max: 9999
system-tray-padding = 0;

# Default: 0, Min: 0, Max: 10
system-tray-pinning = 0;

# Default: 20, Min: 0, Max: 999
client-icon-size = 20;

# Default: 5, Min: -9999, Max: 9999
client-icon-padding = 5;

#
# "tag-names" defines a list of tag names to use. These are
# displayed in the bar. Each string is a UTF-8 string, so
# as long as your chosen font supports them, emoji or icons
# are valid. You can have up to 9 tags in this list.
#
# TODO: Support custom number of tags
#
tag-names = (
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
);

################################
##      Layout Settings       ##
################################

# Default: true
force-vertical-split = true;

# Determines if jdwm will respect a tiled client's size
# hints properties. Floating client are unaffected by
# this setting.
#
# Type: Boolean, Default: true
respect-size-hints = true;

# Default: false
smart-gaps = false;

# Default number of clients that can be present in the
# master area of the screen in any given layout.
#
# Type: Unsigned Integer, Default: 1, Min: 0, Max: 99
default-number-of-clients-in-master-area = 1;

# Determines the portion of the monitor reserved for the
# master area. It can be thought of as a percentage of
# the screen. For example, 50 would mean 50% of the
# screen is dedicated to the master area.
#
# Type: Integer, Default: 50, Min: 1, Max: 99
default-master-factor = 50;

# Default: 10, Min: 0, Max: 9999
default-inner-horizontal-gap = 10;

# Default: 10, Min: 0, Max: 9999
default-inner-vertical-gap = 10;

# Default: 10, Min: 0, Max: 9999
default-outer-horizontal-gap = 10;

# Default: 10, Min: 0, Max: 9999
default-outer-vertical-gap = 10;

################################
##      Window Settings       ##
################################

# Pixel width of the border trim around clients while tiled.
#
# Type: Unsigned Integer, Default: 0, Min: 0, Max: 9999
normal-border-width = 0;

# Pixel width of the border trim around clients while floating.
#
# Type: Unsigned Integer, Default: 5, Min: 0, Max: 9999
floating-border-width = 5;

# Determines the pixel distance before a client can "snap"
# or "dock" against another client or monitor edge, and how
# far the mouse must move to "snap" a tiled client out of
# its layout to become floating.
#
# Type: Unsigned Integer, Default: 32, Min: 0, Max: 9999
snapping-pixel-distance = 32;

# Default: true
enable-raise-floating-window-on-focus = true;

################################
##          Logging           ##
################################

# Note: The internally coded default log level (debug)
# will be used by the logger until the below value can
# be parsed. That means that you may see logs "below"
# the level you define here while jdwm loads. If you
# want to avoid this, instead define the log level with
# cli flags when executing jdwm (like from the .desktop file)
# or recompile jdwm with a custom default value (logger.h).
#
# 0 = Trace (disabled in release build)
# 1 = Debug (default)
# 2 = Info
# 3 = Warnings
# 4 = Errors
# 5 = Fatal
default-log-level = 1;

#
# Loggers are defined ways for jdwm to print information
# to the user about what it's doing, or issues it has ran
# into. There are two major types: stream loggers, and file
# loggers. Stream loggers can either log to stdout or stderr.
# File loggers can log to any file jdwm has permission to
# write to. The two types of loggers though have different
# configuration structures.
#
# Both stream and file loggers require:
#       1) "name" (string). This is a unique identifier used to
#          distinguish one logger from another. Two loggers
#          cannot share the same name. The default logger in
#          jdwm is simply named "Default Logger", and therefore
#          is reserved. Attempting to create a logger of the
#          same name will fail.
#
#       2) "log-level" (int). This determines the verbosity
#          of the information the logger will output. These
#          levels range from 0 to 5, aka Trace to Fatal.
#          Note: If a value below 0 is given, the logger will
#          be assigned a hardcoded default value of 1, aka Debug.
#
#       3) "output" (string). This defines where the log
#          information will be sent. This can be either
#          a stream or a file. For streams, you have two
#          choices, "stderr" or "stdout" (capitalization
#          doesn't matter). Anything else will be
#          considered a file by the parser. All filepaths
#          will be  relative to wherever the program is
#          run from. It can however interpret "~",
#          substituting an absolute path to the users home
#          directory if possible.
#
# Stream loggers also require:
#       1) "use-color" (bool). This tells the logger whether
#          it should include ANSI color codes in its output.
#          It improves the readability of the log output, but
#          it may not be compatible with all terminal emulators.
#
# File loggers also require:
#       1) "filemode" (string). Determines the filemode fopen()
#          uses to open the output file. The two valid options
#          are "w" and "a", for write and append.
#
loggers = (
        {
                name = "File Logger";
                log-level = 1;
                output = "~/.cache/jdwm/jdwm.log";
                filemode = "w";
        }
);

################################
##          Advanced          ##
################################

# If the system tray cannot display itself to the monitor specified
# by "system-tray-pinning", it needs a fallback monitor to display
# itself. "true" displays on the first monitor in jdwm's list, "false"
# the last monitor in that list.
#
# Type: Boolean, Default: true
enable-system-tray-pin-to-first-monitor-on-fail = true;

# This defines the max number of keys + modifiers for
# a key/buttonbind. 1 main key/button + X Modifiers.
# Default value of 4 means 1 main key/button and 3 modifiers.
#
# Type: Unsigned Integer, Default: 4, Min: 1, Max: 10
max-keys = 4;

# Determines how many times per second jdwm will process
# your mouse movements while moving or resizing a client.
# Increasing this value will reduce the interval between
# mouse position updates, improving smoothness, at the
# cost of more processing power.
#
# Type: Unsigned Integer, Default: 120, Min: 1, Max: 999
mouse-refresh-rate = 120;